import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import fs from "fs";
import { componentTagger } from "lovable-tagger";

// --- Auto-generate gallery manifest from /public/gallery ---
const GALLERY_DIR = path.resolve(__dirname, "public", "gallery");
const MANIFEST_FILE = path.resolve(__dirname, "src", "data", "gallery.manifest.ts");
const VALID_EXTS = new Set([".jpg", ".jpeg", ".png", ".webp", ".avif", ".gif", ".svg"]);

async function readDirRecursive(dir: string, base: string): Promise<string[]> {
  const entries = await fs.promises.readdir(dir, { withFileTypes: true });
  const files: string[] = [];
  for (const entry of entries) {
    const full = path.join(dir, entry.name);
    if (entry.isDirectory()) {
      files.push(...(await readDirRecursive(full, base)));
    } else if (entry.isFile()) {
      const rel = path.relative(base, full);
      files.push(rel);
    }
  }
  return files;
}

function fileNameToAlt(name: string): string {
  const base = name.replace(/\.[^.]+$/, "");
  return base.replace(/[-_]+/g, " ").replace(/\b\w/g, (c) => c.toUpperCase());
}

async function generateGalleryManifest() {
  try {
    await fs.promises.mkdir(path.dirname(MANIFEST_FILE), { recursive: true });
    const exists = fs.existsSync(GALLERY_DIR);
    const files = exists ? await readDirRecursive(GALLERY_DIR, GALLERY_DIR) : [];
    const items = files
      .filter((rel) => VALID_EXTS.has(path.extname(rel).toLowerCase()))
      .map((rel) => {
        const alt = fileNameToAlt(path.basename(rel));
        const src = "/gallery/" + rel.split(path.sep).join("/");
        return { src, alt };
      })
      .sort((a, b) => a.src.localeCompare(b.src));

    const content = `// This file is auto-generated by the Vite plugin in vite.config.ts.\n` +
      `// It lists all images under /public/gallery so the app can render them automatically.\n` +
      `// Supported formats: jpg, jpeg, png, webp, avif, gif, svg\n` +
      `// Do not edit manually; your changes will be overwritten on next dev start/build.\n\n` +
      `export const galleryPublicManifest: { src: string; alt: string }[] = ${JSON.stringify(items, null, 2)}\n` +
      `;\n`;

    await fs.promises.writeFile(MANIFEST_FILE, content, "utf8");
  } catch (err) {
    console.warn("gallery-manifest: failed to generate manifest:", err);
  }
}

function galleryManifestPlugin() {
  return {
    name: "gallery-manifest",
    async buildStart() {
      await generateGalleryManifest();
    },
    configureServer(server: any) {
      const regen = async () => {
        await generateGalleryManifest();
        server.ws.send({ type: "full-reload" });
      };
      // initial
      regen();
      // watch changes in public/gallery
      server.watcher.add(GALLERY_DIR);
      const inGallery = (p: string) => p && p.replace(/\\/g, "/").includes(GALLERY_DIR.replace(/\\/g, "/"));
      server.watcher.on("add", (p: string) => inGallery(p) && regen());
      server.watcher.on("unlink", (p: string) => inGallery(p) && regen());
      server.watcher.on("change", (p: string) => inGallery(p) && regen());
    },
  };
}

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [react(), galleryManifestPlugin(), mode === "development" && componentTagger()].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },  
}));
